
@article{brownTenQuickTips2018,
  title = {Ten Quick Tips for Teaching Programming},
  author = {Brown, Neil C. C. and Wilson, Greg},
  year = {2018},
  month = apr,
  volume = {14},
  pages = {e1006023},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1006023},
  journal = {PLOS Computational Biology},
  keywords = {Computer and information sciences,Computer software,Drag,Human learning,Instructors,Language,Language acquisition,Learning},
  language = {en},
  number = {4}
}

@article{clarkDualCodingTheory1991,
  title = {Dual Coding Theory and Education},
  author = {Clark, James M. and Paivio, Allan},
  year = {1991},
  month = sep,
  volume = {3},
  pages = {149--210},
  issn = {1573-336X},
  doi = {10.1007/BF01320076},
  abstract = {Dual coding theory (DCT) explains human behavior and experience in terms of dynamic associative processes that operate on a rich network of modality-specific verbal and nonverbal (or imagery) representations. We first describe the underlying premises of the theory and then show how the basic DCT mechanisms can be used to model diverse educational phenomena. The research demonstrates that concreteness, imagery, and verbal associative processes play major roles in various educational domains: the representation and comprehension of knowledge, learning and memory of school material, effective instruction, individual differences, achievement motivation and test anxiety, and the learning of motor skills. DCT also has important implications for the science and practice of educational psychology \textemdash{} specifically, for educational research and teacher education. We show not only that DCT provides a unified explanation for diverse topics in education, but also that its mechanistic framework accommodates theories cast in terms of strategies and other high-level psychological processes. Although much additional research needs to be done, the concrete models that DCT offers for the behavior and experience of students, teachers, and educational psychologists further our understanding of educational phenomena and strengthen related pedagogical practices.},
  journal = {Educational Psychology Review},
  language = {en},
  number = {3}
}

@article{collinsLiveCodingLaptop2003,
  title = {Live Coding in Laptop Performance},
  author = {Collins, Nick and McLEAN, Alex and Rohrhuber, Julian and Ward, Adrian},
  year = {2003},
  month = dec,
  volume = {8},
  pages = {321--330},
  publisher = {{Cambridge University Press}},
  issn = {1469-8153, 1355-7718},
  doi = {10.1017/S135577180300030X},
  abstract = {Seeking new forms of expression in computer music, a small number of laptop composers are braving the challenges of coding music on the fly. Not content to submit meekly to the rigid interfaces of performance software like Ableton Live or Reason, they work with programming languages, building their own custom software, tweaking or writing the programs themselves as they perform. Often this activity takes place within some established language for computer music like SuperCollider, but there is no reason to stop errant minds pursuing their innovations in general scripting languages like Perl. This paper presents an introduction to the field of live coding, of real-time scripting during laptop music performance, and the improvisatory power and risks involved. We look at two test cases, the command-line music of slub utilising, amongst a grab-bag of technologies, Perl and REALbasic, and Julian Rohrhuber's Just In Time library for SuperCollider. We try to give a flavour of an exciting but hazardous world at the forefront of live laptop performance.},
  journal = {Organised Sound},
  language = {en},
  number = {3}
}

@misc{erinalisonbeckerCarpentriesInstructortrainingCarpentries2019,
  title = {Carpentries/Instructor-Training: {{The Carpentries Instructor Training June}} 2019},
  shorttitle = {Carpentries/Instructor-Training},
  author = {Erin Alison Becker and Christina Koch and Karen Word and Rayna Michelle Harris and Maneesha Sane and Lex Nederbragt and Fran{\c c}ois Michonneau and Kari L Jordan and Amy E. Hodge and Christopher Erdmann and Ariel Rokem and Ted Laderas and Greg Wilson and Ian Lee and Murray Cadzow and Sarah Brown and Toby Hodges and Aleksandra Nenadic and Jonah Duckles and R{\'e}mi Rampin and Tracy Teal and Katrin Leinweber and Paula Andrea Martinez and R{\'e}mi Emonet and Alexander Konovalov and Eric Jankowski and Gerard Capes and Jason Williams and Katherine Koziar and Nicol{\'a}s Palopoli and Noah Spies and Allison Weber and {amoskane} and Anita Sch{\"u}rch and AnnaWilliford and {Brian Ballsun-Stanton} and Jeffrey Oliver and Mik Black and Neil Kindlon and St{\'e}phane Guillou and Yo Yehudi and Alistair John Walsh and Andrew B. Collier and Callin Switzer and Christian Brueffer and Colin Morris and Dan Allan and DanielBrett and Danielle Quinn and Darya Vanichkina and David Jennings and {davidbenncsiro} and Evan Peter Williamson and Jason M Gates and Joe Atzberger and John Bradley and John Pellman and Jonathan Bradley and Karen Cranston and {Kees den Heijer} and Laurence and {Marie-Helene Burle} and Mike Henry and {naught101} and Neal Davis and Nicholas Tierney and Petraea and Sarah M Brown and Sarah Stevens and {satya-vinay} and Sean and Serah Anne Njambi Kiburu and Stefan Helfrich and Steve Moss and Tiago M. D. Pereira},
  year = {2019},
  month = jun,
  doi = {10.5281/zenodo.3258398},
  abstract = {A two-day introduction to modern evidence-based teaching practices, built and maintained by the Carpentry community.},
  howpublished = {Zenodo}
}

@book{fisherBetterLearningStructured2013,
  title = {Better {{Learning Through Structured Teaching}}: {{A Framework}} for the {{Gradual Release}} of {{Responsibility}}},
  shorttitle = {Better {{Learning Through Structured Teaching}}},
  author = {Fisher, Douglas and Frey, Nancy},
  year = {2013},
  month = dec,
  publisher = {{ASCD}},
  abstract = {In this updated 2nd edition of the ASCD best-seller, Douglas Fisher and Nancy Frey dig deeper into the hows and whys of the gradual release of responsibility instructional framework. To gradually release responsibility is to equip students with what they need to be engaged and self-directed learners. On a day-to-day level, it means delivering lessons purposefully planned to incorporate four essential and interrelated instructional phases: 1. Focused Instruction: Preparing students for learning by establishing lesson purpose, modeling strategies and skills, thinking aloud, and noticing how students respond. 2. Guided Instruction: Strategically using prompts, cues, and questions to lead students to new understanding. 3. Collaborative Learning: Allowing students to consolidate their understanding through exploration, problem-solving, discussion, and thinking with their peers. 4. Independent Learning: Requiring students to use the skills and knowledge they've acquired to create authentic products and ask new questions. The authors explore each phase, using real-life examples from a variety of disciplines. You'll find tips and tools for classroom implementation, including checklists for planning and assessment; advice on feedback, homework, group work, differentiated instruction, and blended learning; answers to frequently asked questions; and examples that align to Common Core State Standards. No matter what grade level or subject you teach, Better Learning Through Structured Teaching is your essential guide to helping students expand their capacity for successful and long-lasting learning.},
  googlebooks = {0BFRBAAAQBAJ},
  isbn = {978-1-4166-1830-0},
  keywords = {Education / General},
  language = {en}
}

@inproceedings{haaranenProgrammingPerformanceLivestreaming2017,
  title = {Programming as a {{Performance}}: {{Live}}-Streaming and {{Its Implications}} for {{Computer Science Education}}},
  shorttitle = {Programming as a {{Performance}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Haaranen, Lassi},
  year = {2017},
  month = jun,
  pages = {353--358},
  publisher = {{Association for Computing Machinery}},
  address = {{Bologna, Italy}},
  doi = {10.1145/3059009.3059035},
  abstract = {This article discusses an emerging phenomenon of streaming programming to a live audience who in turn can interact with the streamer. In essence, this means broadcasting the programming environment and typically a web camera feed of the streamer to viewers. Streaming programming bears many similarities with live-streaming playing of video games, which has become extremely popular among gamers over the recent years. In fact, streaming programming often use the same web services as streaming gaming, and the audiences overlap. In this article, we describe this novel approach to programming and situate it in the broader context of computer science education. To gain a deeper insight into this phenomena, we analyzed viewer discussions during a particular programming stream broadcasted during a game programming competition. Finally, we discuss the benefits this approach could offer to computer science education.},
  isbn = {978-1-4503-4704-4},
  keywords = {computer science education,game-based learning,online communities,streaming},
  series = {{{ITiCSE}} '17}
}

@article{johnstonGraduateStudentledParticipatory2019,
  title = {A Graduate Student-Led Participatory Live-Coding Quantitative Methods Course in {{R}}: {{Experiences}} on Initiating, Developing, and Teaching},
  shorttitle = {A Graduate Student-Led Participatory Live-Coding Quantitative Methods Course in {{R}}},
  author = {Johnston, Luke and {Bonsma-Fisher}, Madeleine and Ostblom, Joel and Hasan, Ahmed and Santangelo, James and Coome, Lindsay and Tran, Lina and de Andrade, Elliott and Mahallati, Sara},
  year = {2019},
  month = jun,
  volume = {2},
  pages = {49},
  issn = {2577-3569},
  doi = {10.21105/jose.00049},
  abstract = {Johnston et al., (2019). A graduate student-led participatory live-coding quantitative methods course in R: Experiences on initiating, developing, and teaching. Journal of Open Source Education, 2(16), 49, https://doi.org/10.21105/jose.00049},
  journal = {Journal of Open Source Education},
  language = {en},
  number = {16}
}

@inproceedings{rajLivecodingVsStatic2020,
  title = {Live-Coding vs {{Static Code Examples}}: {{Which}} Is Better with Respect to {{Student Learning}} and {{Cognitive Load}}?},
  shorttitle = {Live-Coding vs {{Static Code Examples}}},
  booktitle = {Proceedings of the {{Twenty}}-{{Second Australasian Computing Education Conference}}},
  author = {Raj, Adalbert Gerald Soosai and Gu, Pan and Zhang, Eda and R, Arokia Xavier Annie and Williams, Jim and Halverson, Richard and Patel, Jignesh M.},
  year = {2020},
  month = feb,
  pages = {152--159},
  publisher = {{ACM}},
  address = {{Melbourne VIC Australia}},
  doi = {10.1145/3373165.3373182},
  isbn = {978-1-4503-7686-0},
  keywords = {Cognitive apprenticeship,Cognitive load theory,Live-coding,Programming pedagogy,Static code examples},
  language = {en}
}

@inproceedings{rajRoleLivecodingLearning2018,
  title = {Role of {{Live}}-Coding in {{Learning Introductory Programming}}},
  booktitle = {Proceedings of the 18th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Raj, Adalbert Gerald Soosai and Patel, Jignesh M. and Halverson, Richard and Halverson, Erica Rosenfeld},
  year = {2018},
  month = nov,
  pages = {1--8},
  publisher = {{Association for Computing Machinery}},
  address = {{Koli, Finland}},
  doi = {10.1145/3279720.3279725},
  abstract = {Live-coding is an approach to teaching programming by writing actual code during class as part of the lectures. In a live-coding session, the instructor thinks aloud while writing code and the students are able to understand the process of programming by observing the thought processes of the instructor. In our study, we conducted a live-coding session to two groups of students as a part of a teaching intervention that was originally designed for studying the effects of using the native language for learning programming. We analyzed the student feedback data that was collected and found that many students have mentioned about the usefulness of live-coding for learning programming. We conducted a grounded theory analysis of the student feedback data to understand the value of live-coding for learning introductory programming. We found that live-coding (1) makes the process of programming easy to understand for novice programmers, (2) helps students learn the process of debugging, and (3) exposes students to good programming practices. We also found that students prefer to code along with the instructor during a live-coding session rather than being mere observers.},
  isbn = {978-1-4503-6535-2},
  keywords = {Computer Science Education,Live-coding,Students' perceptions},
  series = {Koli {{Calling}} '18}
}

@inproceedings{rubinEffectivenessLivecodingTeach2013,
  title = {The {{Effectiveness}} of {{Live}}-Coding to {{Teach Introductory Programming}}},
  booktitle = {Proceeding of the 44th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Rubin, Marc J.},
  year = {2013},
  pages = {651--656},
  publisher = {{ACM}},
  address = {{Denver, Colorado, USA}},
  doi = {10.1145/2445196.2445388},
  abstract = {Live-coding is defined as "the process of designing and implementing a [coding] project in front of class during lecture period". In this article we present our research design and results regarding the effectiveness of live-coding to teach introductory programming. The research design includes two experimental groups spread across four sections of an introductory C++ course at Colorado School of Mines. In the control group, students were taught using static code, meaning that instructors never typed, but instead viewed, compiled, and executed code examples. In the experimental or "live-coding" group, instructors started each lecture with a blank screen, and taught code examples by systematically typing, compiling, and testing code to solve example problems. To assess the effectiveness of live-coding, we administered four surveys and analyzed final grades. Two of the surveys were given at the beginning of the course, and were used to measure baseline programming knowledge and student learning preferences (i.e., VARK). The other two surveys, given at the end of the course, were designed to measure the amount of programming knowledge obtained as well as preferences towards live coding. Lastly, final grades were analyzed in terms of its subcomponents: the assignments, exams, final project, and overall grade. Based on our results, we conclude that teaching via live-coding is as good as if not better than using static code examples.},
  isbn = {978-1-4503-1868-6},
  keywords = {introductory,live-coding,pedagogy,programming},
  series = {{{SIGCSE}} '13}
}

@article{steele-johnsonErrorFramingEffects2014,
  title = {Error {{Framing Effects}} on {{Performance}}: {{Cognitive}}, {{Motivational}}, and {{Affective Pathways}}},
  shorttitle = {Error {{Framing Effects}} on {{Performance}}},
  author = {{Steele-Johnson}, Debra and Kalinoski, Zachary T.},
  year = {2014},
  month = jan,
  volume = {148},
  pages = {93--111},
  publisher = {{Routledge}},
  issn = {0022-3980},
  doi = {10.1080/00223980.2012.748581},
  abstract = {Our purpose was to examine whether positive error framing, that is, making errors salient and cuing individuals to see errors as useful, can benefit learning when task exploration is constrained. Recent research has demonstrated the benefits of a newer approach to training, that is, error management training, that includes the opportunity to actively explore the task and framing errors as beneficial to learning complex tasks (Keith \& Frese, 2008). Other research has highlighted the important role of errors in on\textendash{}the\textendash{}job learning in complex domains (Hutchins, 1995). Participants (N = 168) from a large undergraduate university performed a class scheduling task. Results provided support for a hypothesized path model in which error framing influenced cognitive, motivational, and affective factors which in turn differentially affected performance quantity and quality. Within this model, error framing had significant direct effects on metacognition and self-efficacy. Our results suggest that positive error framing can have beneficial effects even when tasks cannot be structured to support extensive exploration. Whereas future research can expand our understanding of error framing effects on outcomes, results from the current study suggest that positive error framing can facilitate learning from errors in real-time performance of tasks.},
  journal = {The Journal of Psychology},
  keywords = {error framing,performance,subjective task complexity,training},
  note = {\_eprint: https://doi.org/10.1080/00223980.2012.748581},
  number = {1},
  pmid = {24617273}
}

@article{swellerCognitiveArchitectureInstructional2019,
  title = {Cognitive {{Architecture}} and {{Instructional Design}}: 20~{{Years Later}}},
  shorttitle = {Cognitive {{Architecture}} and {{Instructional Design}}},
  author = {Sweller, John and {van Merri{\"e}nboer}, Jeroen J. G. and Paas, Fred},
  year = {2019},
  month = jan,
  issn = {1573-336X},
  doi = {10.1007/s10648-019-09465-5},
  abstract = {Cognitive load theory was introduced in the 1980s as an instructional design theory based on several uncontroversial aspects of human cognitive architecture. Our knowledge of many of the characteristics of working memory, long-term memory and the relations between them had been well-established for many decades prior to the introduction of the theory. Curiously, this knowledge had had a limited impact on the field of instructional design with most instructional design recommendations proceeding as though working memory and long-term memory did not exist. In contrast, cognitive load theory emphasised that all novel information first is processed by a capacity and duration limited working memory and then stored in an unlimited long-term memory for later use. Once information is stored in long-term memory, the capacity and duration limits of working memory disappear transforming our ability to function. By the late 1990s, sufficient data had been collected using the theory to warrant an extended analysis resulting in the publication of Sweller et al. (Educational Psychology Review, 10, 251\textendash{}296, 1998). Extensive further theoretical and empirical work have been carried out since that time and this paper is an attempt to summarise the last 20 years of cognitive load theory and to sketch directions for future research.},
  journal = {Educational Psychology Review},
  keywords = {Cognitive load theory,Instructional advances,Theoretical developments},
  language = {en}
}

@article{wilsonSoftwareCarpentryLessons2016,
  title = {Software {{Carpentry}}: Lessons Learned},
  shorttitle = {Software {{Carpentry}}},
  author = {Wilson, Greg},
  year = {2016},
  month = jan,
  volume = {3},
  pages = {62},
  issn = {2046-1402},
  doi = {10.12688/f1000research.3-62.v2},
  journal = {F1000Research},
  language = {en}
}

@book{wilsonTeachingTechTogether2019,
  title = {{Teaching tech together: how to make lessons that work and build teaching community around them}},
  shorttitle = {{Teaching tech together}},
  author = {Wilson, Greg},
  year = {2019},
  publisher = {{Chapman and Hall}},
  isbn = {978-0-367-35297-4},
  language = {nob}
}

@article{wrightWhyWhenHow2020,
  title = {The Why, When, and How of Computing in Biology Classrooms},
  author = {Wright, April M. and Schwartz, Rachel S. and Oaks, Jamie R. and Newman, Catherine E. and Flanagan, Sarah P.},
  year = {2020},
  month = mar,
  volume = {8},
  pages = {1854},
  issn = {2046-1402},
  doi = {10.12688/f1000research.20873.2},
  journal = {F1000Research},
  language = {en}
}


